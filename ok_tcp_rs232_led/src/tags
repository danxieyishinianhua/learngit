!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BSTREE	bt.h	/^}BSTREE;$/;"	t	typeref:struct:BsTree
BSTREE_NODE	bt.h	/^}BSTREE_NODE;$/;"	t	typeref:struct:BsTreeNode
BsTree	bt.h	/^typedef struct BsTree{$/;"	s
BsTreeNode	bt.h	/^typedef struct BsTreeNode{$/;"	s
CHECK_OFF_LINE	INLcpMsg.h	53;"	d
DEBUG	tcp_rs232.h	39;"	d
EXEC	Makefile	/^EXEC = tcp_rs232$/;"	m
FALSE	serial.h	18;"	d
HEXLEN	tcp_rs232.h	36;"	d
HI_UINT16	tcp_rs232.h	42;"	d
HexToStr	led_log.c	/^void HexToStr (const uint8 *digest,uint8 (*buff)[HEXLEN],uint32 len)$/;"	f
INLCP_INITIAL_LINK_RQT	INLcpMsg.h	/^    INLCP_INITIAL_LINK_RQT = 0,\/\/登录注册$/;"	e	enum:__anon1
INLCP_INITIAL_LINK_RSP	INLcpMsg.h	/^    INLCP_INITIAL_LINK_RSP = 1,\/\/登录反馈$/;"	e	enum:__anon1
INLCP_MSG_H_	INLcpMsg.h	2;"	d
INLCP_REGISTER_RQT	INLcpMsg.h	/^    INLCP_REGISTER_RQT       = 2,\/\/每次注册$/;"	e	enum:__anon1
INLCP_REGISTER_RSP	INLcpMsg.h	/^    INLCP_REGISTER_RSP       = 3,\/\/注册反馈$/;"	e	enum:__anon1
INLCP_SET_LIGHT_RQT	INLcpMsg.h	/^    INLCP_SET_LIGHT_RQT       = 100,\/\/set led's brightness and color temperature$/;"	e	enum:__anon1
INLCP_SET_LIGHT_RSP	INLcpMsg.h	/^    INLCP_SET_LIGHT_RSP		= 101,\/\/反馈$/;"	e	enum:__anon1
INLCP_SET_RGB_RQT	INLcpMsg.h	/^   INLCP_SET_RGB_RQT        =102,$/;"	e	enum:__anon1
INLCP_SET_RGB_RSP	INLcpMsg.h	/^   INLCP_SET_RGB_RSP        =103,$/;"	e	enum:__anon1
INLCP_ZB_EVENT_RQT	INLcpMsg.h	/^   INLCP_ZB_EVENT_RQT		= 106,$/;"	e	enum:__anon1
INLCP_ZB_EVENT_RSP	INLcpMsg.h	/^   INLCP_ZB_EVENT_RSP		= 107,$/;"	e	enum:__anon1
INLCP_ZB_LOOP_SET_RQT	INLcpMsg.h	/^   INLCP_ZB_LOOP_SET_RQT           = 104,$/;"	e	enum:__anon1
INLCP_ZB_LOOP_SET_RSP	INLcpMsg.h	/^   INLCP_ZB_LOOP_SET_RSP          = 105,$/;"	e	enum:__anon1
INLCP_ZB_MSG_ADDR_RQT	INLcpMsg.h	/^   INLCP_ZB_MSG_ADDR_RQT	= 110,$/;"	e	enum:__anon1
INLCP_ZB_MSG_ADDR_RSP	INLcpMsg.h	/^   INLCP_ZB_MSG_ADDR_RSP	= 111,$/;"	e	enum:__anon1
INLCP_ZB_REMOVE_LAMP_RQT	INLcpMsg.h	/^   INLCP_ZB_REMOVE_LAMP_RQT		= 118,$/;"	e	enum:__anon1
INLCP_ZB_REMOVE_LAMP_RSP	INLcpMsg.h	/^   INLCP_ZB_REMOVE_LAMP_RSP		= 119,$/;"	e	enum:__anon1
INLCP_ZB_RESTORE_FACTORY_RQT	INLcpMsg.h	/^   INLCP_ZB_RESTORE_FACTORY_RQT		= 116,$/;"	e	enum:__anon1
INLCP_ZB_RESTORE_FACTORY_RSP	INLcpMsg.h	/^   INLCP_ZB_RESTORE_FACTORY_RSP		= 117,$/;"	e	enum:__anon1
INLCP_ZB_SET_BRIGHTNESS_RQT	INLcpMsg.h	/^   INLCP_ZB_SET_BRIGHTNESS_RQT 	= 112,$/;"	e	enum:__anon1
INLCP_ZB_SET_BRIGHTNESS_RSP	INLcpMsg.h	/^   INLCP_ZB_SET_BRIGHTNESS_RSP 	= 113,$/;"	e	enum:__anon1
INLCP_ZB_SET_COLORTEMP_RQT	INLcpMsg.h	/^   INLCP_ZB_SET_COLORTEMP_RQT 		= 114,$/;"	e	enum:__anon1
INLCP_ZB_SET_COLORTEMP_RSP	INLcpMsg.h	/^   INLCP_ZB_SET_COLORTEMP_RSP 		= 115,$/;"	e	enum:__anon1
INLCP_ZB_SET_MOTOR_SHIFT_RQT	INLcpMsg.h	/^   INLCP_ZB_SET_MOTOR_SHIFT_RQT		= 120,$/;"	e	enum:__anon1
INLCP_ZB_SET_MOTOR_SHIFT_RSP	INLcpMsg.h	/^   INLCP_ZB_SET_MOTOR_SHIFT_RSP		= 121,$/;"	e	enum:__anon1
INLCP_ZB_UPDATE_DRIVER_RQT	INLcpMsg.h	/^   INLCP_ZB_UPDATE_DRIVER_RQT	= 108,$/;"	e	enum:__anon1
INLCP_ZB_UPDATE_DRIVER_RSP	INLcpMsg.h	/^   INLCP_ZB_UPDATE_DRIVER_RSP	= 109,$/;"	e	enum:__anon1
INLcpInitialLink	INLcpMsg.h	/^struct INLcpInitialLink$/;"	s
INLcpInitialLinkRsp	INLcpMsg.h	/^struct INLcpInitialLinkRsp$/;"	s
INLcpMsgSet	INLcpMsg.h	/^struct INLcpMsgSet {$/;"	s
INLcpMsgSet_list	INLcpMsg.h	/^struct INLcpMsgSet_list {$/;"	s
INLcpRegister	INLcpMsg.h	/^struct INLcpRegister$/;"	s
INLcpRegisterRsp	INLcpMsg.h	/^struct INLcpRegisterRsp$/;"	s
INLcpZBEventReq	INLcpMsg.h	/^struct INLcpZBEventReq{$/;"	s
INLcpZBEventrRsp	INLcpMsg.h	/^struct INLcpZBEventrRsp{$/;"	s
INLcpZBLoopSetReq	INLcpMsg.h	/^struct INLcpZBLoopSetReq{$/;"	s
INLcpZBLoopSetRsp	INLcpMsg.h	/^struct INLcpZBLoopSetRsp{$/;"	s
INLcpZBMsg	INLcpMsg.h	/^struct INLcpZBMsg$/;"	s
INLcpZBMsgAddrReq	INLcpMsg.h	/^struct INLcpZBMsgAddrReq {$/;"	s
INLcpZBMsgAddrRsp	INLcpMsg.h	/^struct INLcpZBMsgAddrRsp {$/;"	s
INLcpZBMsgHeader	INLcpMsg.h	66;"	d
INLcpZBRemoveLampReq	INLcpMsg.h	/^struct INLcpZBRemoveLampReq$/;"	s
INLcpZBRemoveLampRsp	INLcpMsg.h	/^struct INLcpZBRemoveLampRsp$/;"	s
INLcpZBRestoreFactoryReq	INLcpMsg.h	/^struct INLcpZBRestoreFactoryReq$/;"	s
INLcpZBRestoreFactoryRsp	INLcpMsg.h	/^struct INLcpZBRestoreFactoryRsp$/;"	s
INLcpZBSetBrightnessReq	INLcpMsg.h	/^struct INLcpZBSetBrightnessReq$/;"	s
INLcpZBSetBrightnessRsp	INLcpMsg.h	/^struct INLcpZBSetBrightnessRsp$/;"	s
INLcpZBSetColorTempReq	INLcpMsg.h	/^struct INLcpZBSetColorTempReq$/;"	s
INLcpZBSetColorTempRsp	INLcpMsg.h	/^struct INLcpZBSetColorTempRsp$/;"	s
INLcpZBSetLightReq	INLcpMsg.h	/^struct INLcpZBSetLightReq$/;"	s
INLcpZBSetLightRsp	INLcpMsg.h	/^struct INLcpZBSetLightRsp$/;"	s
INLcpZBSetMotorShiftReq	INLcpMsg.h	/^struct INLcpZBSetMotorShiftReq$/;"	s
INLcpZBSetMotorShiftRsp	INLcpMsg.h	/^struct INLcpZBSetMotorShiftRsp$/;"	s
INLcpZBSetRGBReq	INLcpMsg.h	/^struct INLcpZBSetRGBReq$/;"	s
INLcpZBSetRGBRsp	INLcpMsg.h	/^struct INLcpZBSetRGBRsp$/;"	s
INLcpZBUpdateDriverReq	INLcpMsg.h	/^struct INLcpZBUpdateDriverReq {$/;"	s
INLcpZBUpdateDriverRsp	INLcpMsg.h	/^struct INLcpZBUpdateDriverRsp {$/;"	s
LIBS	Makefile	/^LIBS = -lpthread$/;"	m
LIST	ls.h	/^} LIST;$/;"	t	typeref:struct:List
LIST_NODE	ls.h	/^} LIST_NODE;$/;"	t	typeref:struct:ListNode
LOG_FILE_PATH	tcp_rs232.h	34;"	d
LO_UINT16	tcp_rs232.h	43;"	d
List	ls.h	/^typedef struct List{\/\/链表$/;"	s
ListNode	ls.h	/^typedef struct ListNode{\/\/链表节点$/;"	s
MACNUM	tcp_rs232.h	37;"	d
NEWFACTORY_REMOTE	INLcpMsg.h	50;"	d
OBJS	Makefile	/^OBJS = rs232.c main.c tcp.c check_link.c  serial.c led_log.c ls.c bt.c mod_zigbee.c$/;"	m
OpenDev	serial.c	/^int OpenDev(char *Dev)$/;"	f
RS232_BAUDRATE	tcp_rs232.h	31;"	d
RS232_DEVICE	tcp_rs232.h	32;"	d
SERVER_IP	tcp_rs232.h	/^char SERVER_IP[16];$/;"	v
SERVER_PORT	tcp_rs232.h	/^int SERVER_PORT;$/;"	v
StrToHex	led_log.c	/^uint8 StrToHex (char hight_ch,char low_ch)$/;"	f
TRUE	serial.h	17;"	d
Version	tcp_rs232.h	/^char Version[16];$/;"	v
ZBADDR	INLcpMsg.h	49;"	d
ZB_END	INLcpMsg.h	51;"	d
ZB_FAILED	INLcpMsg.h	57;"	d
ZB_LOOP_SET_BRIGHTNESS	INLcpMsg.h	/^	ZB_LOOP_SET_BRIGHTNESS = 0,$/;"	e	enum:__anon2
ZB_LOOP_SET_COLORTEMP	INLcpMsg.h	/^	ZB_LOOP_SET_COLORTEMP = 1,$/;"	e	enum:__anon2
ZB_NOT_EXIST	INLcpMsg.h	55;"	d
ZB_OFF_LINE	INLcpMsg.h	54;"	d
ZB_ON_LINE	INLcpMsg.h	52;"	d
ZB_SET_BT	INLcpMsg.h	62;"	d
ZB_SET_CT	INLcpMsg.h	61;"	d
ZB_SET_LGT	INLcpMsg.h	59;"	d
ZB_SET_MS	INLcpMsg.h	64;"	d
ZB_SET_REMOVE	INLcpMsg.h	63;"	d
ZB_SET_RGB	INLcpMsg.h	60;"	d
ZB_SUCCESS	INLcpMsg.h	56;"	d
_BT_H_	bt.h	2;"	d
_LS_H	ls.h	2;"	d
_SERIAL_H_	serial.h	2;"	d
__SG_RS232_UART_H__	tcp_rs232.h	2;"	d
addr	tcp_rs232.h	/^struct sockaddr_in addr;  \/\/socket connect$/;"	v	typeref:struct:sockaddr_in
angle	INLcpMsg.h	/^        uint16 angle;           \/\/ range < 0 ~ 2000 > , middle is 1000.$/;"	m	struct:INLcpZBSetMotorShiftReq
b_val	INLcpMsg.h	/^	uint8 b_val;$/;"	m	struct:INLcpZBSetRGBReq
bkwd	ls.h	/^	LIST_NODE* bkwd;\/\/反向迭代指针,用于查询$/;"	m	struct:List
brightness	INLcpMsg.h	/^	uint8 brightness;		$/;"	m	struct:INLcpZBSetLightReq
brightness	INLcpMsg.h	/^	uint8 brightness;$/;"	m	struct:INLcpZBSetBrightnessReq
brightness	INLcpMsg.h	/^    uint8 brightness;$/;"	m	struct:INLcpRegister
bstree	tcp_rs232.h	/^BSTREE bstree;$/;"	v
bstree_clear	bt.c	/^void bstree_clear(BSTREE* bstree)$/;"	f
bstree_deinit	bt.c	/^void bstree_deinit(BSTREE* bstree)$/;"	f
bstree_erase	bt.c	/^int bstree_erase(BSTREE* bstree,void* data)$/;"	f
bstree_exist	bt.c	/^int bstree_exist(BSTREE* bstree,void* data)$/;"	f
bstree_height	bt.c	/^size_t bstree_height(BSTREE* bstree)$/;"	f
bstree_init	bt.c	/^void bstree_init(BSTREE* bstree)$/;"	f
bstree_insert	bt.c	/^void bstree_insert(BSTREE* bstree,void* data)$/;"	f
bstree_live	bt.c	/^int bstree_live(BSTREE* bstree,void* data,void*  list_data)$/;"	f
bstree_size	bt.c	/^size_t bstree_size(BSTREE* bstree)$/;"	f
bstree_travel	bt.c	/^void bstree_travel(BSTREE* bstree)$/;"	f
bstree_update	bt.c	/^int bstree_update(BSTREE* bstree,void* data)$/;"	f
check_code	INLcpMsg.h	/^  	uint8 check_code;   \/\/1->on_line  0->off_line$/;"	m	struct:INLcpZBEventReq
check_link	check_link.c	/^void *check_link(void *arg)$/;"	f
check_send	tcp_rs232.h	/^unsigned int check_send;$/;"	v
clear	bt.c	/^static void clear(BSTREE_NODE** root)$/;"	f	file:
cmd_end	INLcpMsg.h	/^uint8  cmd_end;   \/\/ 0xFE$/;"	m	struct:INLcpMsgSet
cmd_mode	INLcpMsg.h	/^	uint8  cmd_mode; $/;"	m	struct:INLcpMsgSet_list
cmd_mode	INLcpMsg.h	/^uint8  cmd_mode; $/;"	m	struct:INLcpMsgSet
colortemp	INLcpMsg.h	/^	uint8 colortemp;$/;"	m	struct:INLcpZBSetColorTempReq
colortemp	INLcpMsg.h	/^	uint8 colortemp;$/;"	m	struct:INLcpZBSetLightReq
colortemp	INLcpMsg.h	/^    uint8 colortemp;$/;"	m	struct:INLcpRegister
cond_list	tcp_rs232.h	/^pthread_cond_t cond_list;$/;"	v
cr_val	INLcpMsg.h	/^	uint8 cr_val; \/\/color$/;"	m	struct:INLcpMsgSet_list
cr_val	INLcpMsg.h	/^uint8  cr_val; \/\/color$/;"	m	struct:INLcpMsgSet
create_node	bt.c	/^static BSTREE_NODE* create_node(void* data)$/;"	f	file:
create_node	ls.c	/^static LIST_NODE* create_node(struct INLcpMsgSet_list data,LIST_NODE* prev,LIST_NODE* next){$/;"	f	file:
data	ls.h	/^  	struct INLcpMsgSet_list data; \/\/数据$/;"	m	struct:ListNode	typeref:struct:ListNode::INLcpMsgSet_list
delay	INLcpMsg.h	/^	uint16 delay;$/;"	m	struct:INLcpZBUpdateDriverReq
destroy_node	bt.c	/^static void destroy_node(BSTREE_NODE* node)$/;"	f	file:
destroy_node	ls.c	/^static LIST_NODE* destroy_node(LIST_NODE* node,LIST_NODE** prev){\/\/prev取前节点$/;"	f	file:
dev_type	INLcpMsg.h	/^	uint8  dev_type;$/;"	m	struct:INLcpZBMsgAddrReq
err_code	INLcpMsg.h	/^	uint32 err_code;     \/\/1->not_exist,0->success,2->off_line$/;"	m	struct:INLcpZBSetLightRsp
err_code	INLcpMsg.h	/^	uint32 err_code;     \/\/1->not_exist,0->success,2->off_line$/;"	m	struct:INLcpZBSetRGBRsp
err_code	INLcpMsg.h	/^	uint32 err_code;$/;"	m	struct:INLcpZBEventrRsp
err_code	INLcpMsg.h	/^	uint32 err_code;$/;"	m	struct:INLcpZBMsgAddrRsp
err_code	INLcpMsg.h	/^	uint32 err_code;$/;"	m	struct:INLcpZBRemoveLampRsp
err_code	INLcpMsg.h	/^	uint32 err_code;$/;"	m	struct:INLcpZBRestoreFactoryRsp
err_code	INLcpMsg.h	/^	uint32 err_code;$/;"	m	struct:INLcpZBSetBrightnessRsp
err_code	INLcpMsg.h	/^	uint32 err_code;$/;"	m	struct:INLcpZBSetColorTempRsp
err_code	INLcpMsg.h	/^	uint32 err_code;$/;"	m	struct:INLcpZBUpdateDriverRsp
err_code	INLcpMsg.h	/^	uint32 err_code;\/\/1->not_exist,0->success,2->off_line$/;"	m	struct:INLcpZBLoopSetRsp
err_code	INLcpMsg.h	/^        uint32 err_code;$/;"	m	struct:INLcpZBSetMotorShiftRsp
err_code	INLcpMsg.h	/^    uint32 err_code;$/;"	m	struct:INLcpInitialLinkRsp
err_code	INLcpMsg.h	/^    uint32 err_code;$/;"	m	struct:INLcpRegisterRsp
expires	INLcpMsg.h	/^    uint32 expires;\/\/s$/;"	m	struct:INLcpRegisterRsp
fileDev	main.c	/^void fileDev()$/;"	f
filename	INLcpMsg.h	/^	char filename[64];$/;"	m	struct:INLcpZBUpdateDriverReq
find	bt.c	/^static BSTREE_NODE **find(void* data,BSTREE_NODE** root)$/;"	f	file:
frwd	ls.h	/^	LIST_NODE* frwd;\/\/正向迭代指针,用于查询$/;"	m	struct:List
g_val	INLcpMsg.h	/^	uint8 g_val;		$/;"	m	struct:INLcpZBSetRGBReq
get_loacl_time	led_log.c	/^int get_loacl_time (char *local_time)$/;"	f
get_mac	check_link.c	/^char get_mac (char *buf, int size)$/;"	f
get_server_msg	main.c	/^void get_server_msg(void)$/;"	f
get_version	check_link.c	/^char get_version(char *buf, int size)$/;"	f
head	ls.h	/^  LIST_NODE* head;\/\/链表头指针$/;"	m	struct:List
height	bt.c	/^static size_t height(BSTREE_NODE* root)$/;"	f	file:
hi_nwk_father_addr	INLcpMsg.h	/^	uint8  hi_nwk_father_addr;$/;"	m	struct:INLcpZBMsgAddrReq
hi_nwkaddr	INLcpMsg.h	/^	uint8  hi_nwkaddr;$/;"	m	struct:INLcpZBMsgAddrReq
hi_panid	INLcpMsg.h	/^	uint8  hi_panid;$/;"	m	struct:INLcpZBMsgAddrReq
id	INLcpMsg.h	/^    char id[32];$/;"	m	struct:INLcpInitialLink
insert	bt.c	/^static void insert(BSTREE_NODE* node,BSTREE_NODE** root)$/;"	f	file:
land_flag	tcp_rs232.h	/^int land_flag;$/;"	v
land_send	tcp_rs232.h	/^struct INLcpInitialLink  land_send; \/\/login server$/;"	v	typeref:struct:INLcpInitialLink
left	bt.h	/^   struct BsTreeNode *left;$/;"	m	struct:BsTreeNode	typeref:struct:BsTreeNode::BsTreeNode
lgt_val	INLcpMsg.h	/^	uint8  lgt_val; \/\/lgt$/;"	m	struct:INLcpMsgSet_list
lgt_val	INLcpMsg.h	/^uint8  lgt_val; \/\/lgt$/;"	m	struct:INLcpMsgSet
link_flag	tcp_rs232.h	/^unsigned int link_flag;$/;"	v
link_send	tcp_rs232.h	/^struct INLcpRegister link_send;  \/\/register server$/;"	v	typeref:struct:INLcpRegister
list	tcp_rs232.h	/^LIST list;$/;"	v
list_append	ls.c	/^void list_append(LIST* list,struct INLcpMsgSet_list data){\/\/追加$/;"	f
list_begin	ls.c	/^void list_begin(LIST* list){$/;"	f
list_current	ls.c	/^struct INLcpMsgSet_list* list_current(LIST* list){\/\/只取数据不移$/;"	f
list_deinit	ls.c	/^void list_deinit(LIST* list){\/\/释放并恢复$/;"	f
list_empty	ls.c	/^int list_empty(LIST* list){\/\/判断空$/;"	f
list_end	ls.c	/^int list_end(LIST* list){$/;"	f
list_id	INLcpMsg.h	/^	unsigned long list_id;$/;"	m	struct:INLcpMsgSet_list
list_init	ls.c	/^void list_init(LIST* list){\/\/初始化List$/;"	f
list_next	ls.c	/^struct INLcpMsgSet_list* list_next(LIST* list){\/\/取数据并后移$/;"	f
list_prev	ls.c	/^struct INLcpMsgSet_list* list_prev(LIST* list){\/\/取数据并前移$/;"	f
list_remove	ls.c	/^void list_remove(LIST* list,int list_id){                                                                    $/;"	f
list_size	ls.c	/^size_t list_size(LIST* list){$/;"	f
live_val	INLcpMsg.h	/^   int live_val;$/;"	m	struct:zb_tree
lo_nwk_father_addr	INLcpMsg.h	/^	uint8  lo_nwk_father_addr;$/;"	m	struct:INLcpZBMsgAddrReq
lo_nwkaddr	INLcpMsg.h	/^	uint8  lo_nwkaddr;$/;"	m	struct:INLcpZBMsgAddrReq
lo_panid	INLcpMsg.h	/^	uint8  lo_panid;$/;"	m	struct:INLcpZBMsgAddrReq
log_buf	tcp_rs232.h	/^char log_buf[1024];$/;"	v
log_to_file	led_log.c	/^void log_to_file (const char *str1, char *str2, char *str3)$/;"	f
mac_addr	INLcpMsg.h	/^    char mac_addr[32];$/;"	m	struct:INLcpInitialLink
macaddr	INLcpMsg.h	/^	char   macaddr[32];$/;"	m	struct:INLcpZBMsgAddrReq
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBEventReq
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBLoopSetReq
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBRemoveLampReq
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBSetBrightnessReq
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBSetBrightnessRsp
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBSetColorTempReq
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBSetColorTempRsp
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBSetLightReq
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBSetLightRsp
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBSetRGBReq
macaddr	INLcpMsg.h	/^	char macaddr[32];$/;"	m	struct:INLcpZBSetRGBRsp
macaddr	INLcpMsg.h	/^	uint8  macaddr[8];$/;"	m	struct:INLcpMsgSet_list
macaddr	INLcpMsg.h	/^        char macaddr[32];$/;"	m	struct:INLcpZBSetMotorShiftReq
macaddr	INLcpMsg.h	/^        char macaddr[32];$/;"	m	struct:INLcpZBSetMotorShiftRsp
macaddr	INLcpMsg.h	/^   uint8 macaddr[8];$/;"	m	struct:zb_tree
macaddr	INLcpMsg.h	/^uint8  macaddr[8];$/;"	m	struct:INLcpMsgSet
main	main.c	/^int main (void)$/;"	f
motornum	INLcpMsg.h	/^        uint8 motornum;      \/\/start from 1 , 2 , 3 ...$/;"	m	struct:INLcpZBSetMotorShiftReq
msgcheck	INLcpMsg.h	/^	uint8   msgcheck;  \/\/0xfA->set$/;"	m	struct:INLcpMsgSet_list
msgcheck	INLcpMsg.h	/^uint8   msgcheck;  \/\/0xfA->set  0xFD->reset factory$/;"	m	struct:INLcpMsgSet
mutex_list	tcp_rs232.h	/^pthread_mutex_t mutex_list;$/;"	v
name_arr	serial.h	/^int name_arr[] = {38400,  19200,  9600,  4800,  2400,  1200,  300,$/;"	v
next	ls.h	/^	struct ListNode* next;\/\/后节点$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
nwk_channel	INLcpMsg.h	/^	uint8  nwk_channel;$/;"	m	struct:INLcpZBMsgAddrReq
nwkaddr	INLcpMsg.h	/^	uint8  nwkaddr[2];$/;"	m	struct:INLcpMsgSet_list
nwkaddr	INLcpMsg.h	/^   uint8 nwkaddr[2];$/;"	m	struct:zb_tree
nwkaddr	INLcpMsg.h	/^uint8  nwkaddr[2];$/;"	m	struct:INLcpMsgSet
placeholder	INLcpMsg.h	/^	uint8 placeholder[1];$/;"	m	struct:INLcpZBSetRGBReq
placeholder	INLcpMsg.h	/^	uint8 placeholder[2];$/;"	m	struct:INLcpZBLoopSetReq
placeholder	INLcpMsg.h	/^	uint8 placeholder[2];$/;"	m	struct:INLcpZBSetLightReq
placeholder	INLcpMsg.h	/^	uint8 placeholder[3];$/;"	m	struct:INLcpZBMsgAddrReq
placeholder	INLcpMsg.h	/^	uint8 placeholder[3];$/;"	m	struct:INLcpZBSetBrightnessReq
placeholder	INLcpMsg.h	/^	uint8 placeholder[3];$/;"	m	struct:INLcpZBSetColorTempReq
placeholder	INLcpMsg.h	/^  	uint8 placeholder[3];$/;"	m	struct:INLcpZBEventReq
placeholder	INLcpMsg.h	/^        uint8 placeholder[1];$/;"	m	struct:INLcpZBSetMotorShiftReq
placeholder	INLcpMsg.h	/^    uint8 placeholder[2];$/;"	m	struct:INLcpInitialLink
placeholder	INLcpMsg.h	/^    uint8 placeholder[2];$/;"	m	struct:INLcpRegister
pox_system	led_log.c	/^int pox_system(const char *cmd_line)$/;"	f
prev	ls.h	/^	struct ListNode* prev;\/\/前节点$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
pth_link	tcp_rs232.h	/^pthread_t pth_link;$/;"	v
pth_rs232_read	tcp_rs232.h	/^pthread_t pth_rs232_read;$/;"	v
pth_rs232_write	tcp_rs232.h	/^pthread_t pth_rs232_write;$/;"	v
pth_tcp_recv	tcp_rs232.h	/^pthread_t pth_tcp_recv;$/;"	v
pth_zb_live_check	tcp_rs232.h	/^pthread_t pth_zb_live_check;$/;"	v
r_val	INLcpMsg.h	/^	uint8 r_val;		$/;"	m	struct:INLcpZBSetRGBReq
recv_light_values	INLcpMsg.h	/^	uint8  recv_light_values[5];$/;"	m	struct:INLcpZBMsgAddrReq
reserve_rgb	INLcpMsg.h	/^	uint8  reserve_rgb[3]; \/\/ RGB value$/;"	m	struct:INLcpMsgSet_list
reserve_rgb	INLcpMsg.h	/^uint8  reserve_rgb[3]; \/\/ RGB value$/;"	m	struct:INLcpMsgSet
right	bt.h	/^   struct BsTreeNode *right;$/;"	m	struct:BsTreeNode	typeref:struct:BsTreeNode::BsTreeNode
root	bt.h	/^  BSTREE_NODE *root;$/;"	m	struct:BsTree
rs232_fd	tcp_rs232.h	/^int rs232_fd;$/;"	v
rs232_recv	rs232.c	/^void *rs232_recv(void *arg)$/;"	f
rs232_save_msg_list	tcp_rs232.h	/^struct INLcpMsgSet_list  rs232_save_msg_list;$/;"	v	typeref:struct:INLcpMsgSet_list
rs232_send	rs232.c	/^char rs232_send(char *msg)$/;"	f
rs232_write_list	rs232.c	/^void *rs232_write_list(void *arg)$/;"	f
set_Parity	serial.c	/^int set_Parity(int fd,int databits,int stopbits,int parity)$/;"	f
set_speed	serial.c	/^void set_speed(int fd, int speed)$/;"	f
set_type	INLcpMsg.h	/^	uint8 set_type;$/;"	m	struct:INLcpZBLoopSetReq
sighandler_t	led_log.c	/^typedef void (*sighandler_t)(int);$/;"	t	file:
size	bt.h	/^  size_t size;$/;"	m	struct:BsTree
sockfd	tcp_rs232.h	/^int sockfd;$/;"	v
speed_arr	serial.h	/^int speed_arr[] = { B38400, B19200, B9600, B4800, B2400, B1200, B300,$/;"	v
sw	INLcpMsg.h	/^	uint8 sw;  		\/\/0: stop 		1:start$/;"	m	struct:INLcpZBLoopSetReq
tail	ls.h	/^	LIST_NODE* tail;\/\/链表尾指针$/;"	m	struct:List
tcp_recv	tcp.c	/^void *tcp_recv(void *arg)$/;"	f
tcp_send	tcp.c	/^char tcp_send(char *msg, int size)$/;"	f
travel	bt.c	/^static void travel(BSTREE_NODE* root)$/;"	f	file:
uart_close	serial.c	/^int uart_close(int fd)$/;"	f
uart_setup	serial.c	/^int uart_setup(char *dev, int baud)$/;"	f
uint16	INLcpMsg.h	/^typedef unsigned short 	uint16;$/;"	t
uint32	INLcpMsg.h	/^typedef unsigned int	uint32;$/;"	t
uint8	INLcpMsg.h	/^typedef unsigned char 	uint8;$/;"	t
version	INLcpMsg.h	/^	uint16 version;$/;"	m	struct:INLcpZBUpdateDriverReq
version	INLcpMsg.h	/^    uint16 version;$/;"	m	struct:INLcpInitialLink
zb_data	bt.h	/^   struct zb_tree zb_data;$/;"	m	struct:BsTreeNode	typeref:struct:BsTreeNode::zb_tree
zb_live_check	mod_zigbee.c	/^void *zb_live_check(void *arg)$/;"	f
zb_tree	INLcpMsg.h	/^struct zb_tree{$/;"	s
zb_tree_insert	mod_zigbee.c	/^void zb_tree_insert(void * data)$/;"	f
zigbee_check	mod_zigbee.c	/^int  zigbee_check (void *data,void* list_data)$/;"	f
zigbee_off_line	tcp.c	/^void zigbee_off_line(struct zb_tree zb_data,uint8 check_code)$/;"	f
